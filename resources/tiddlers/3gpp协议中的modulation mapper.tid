created: 20211211155326916
modified: 20211212073357551
revision: 114-633e2531590524969354cb3ec14e4fc7
tags: 调制解调 [[5G NR]] 3gpp
title: 3gpp协议中的modulation mapper
type: text/vnd.tiddlywiki

* BPSK: $$d(i)=\frac{1}{\sqrt{2}}[(1-2 b(i))+j(1-2 b(i))]$$


* QPSK: $$d(i)=\frac{1}{\sqrt{2}}[(1-2 b(2 i))+j(1-2 b(2 i+1))]$$

*16QAM: $$d(i)=\frac{1}{\sqrt{10}}\{(1-2 b(4 i))[2-(1-2 b(4 i+2))]+j(1-2 b(4 i+1))[2-(1-2 b(4 i+3))]\}$$

* 64QAM: $$d(i)=\frac{1}{\sqrt{42}}\{(1-2 b(6 i))[4-(1-2 b(6 i+2))[2-(1-2 b(6 i+4))]]+j(1-2 b(6 i+1))[4-(1-2 b(6 i+3))[2-(1-2 b(6 i+5))]]\}$$

** 64QAM的复杂度适中，用它来解释一下公式。虚部实部的公式相同，只看实部。$$1 - 2 b(6 i + 4)$$的结果是$$\pm 1$$，$$2 - (1 - 2 b(6 i + 4))$$也就是$$\pm 1$$ 先翻转， 然后在坐标轴上右移2，得到$$[1, 3]$$；然后再乘以$$1 - 2 b(6 i + 2)$$，也就是$$\pm 1$$，得到$$[-3, -1, 1, 3]$$，之后操作类似：翻转，然后右移4，得到了$$[1, 3, 5, 7]$$；最后在通过乘以$$1 - 2 b(6i)$$ 对称拓展，变成$$[-7, -5, -3, -1, 1, 3, 5, 7]$$。

** 虚部的公式含义类似。

** $$\frac{1}{\sqrt{42}}$$怎么来的：4个象限的功率完全相同，先只考虑一个象限的。一个象限里面有16个点，每个点的坐标中，x轴上1,3,5,7各出现了4次，y轴上也这样；所以这16个点的总功率为$$(1^2 + 3^2 + 5^2 + 7^2) \times 4 \times 2 =672$$，所以四个象限一共16个点的总功率为$$672 \times 4 = 2688$$，所以64个点的平均功率为$$2688/64 = 42$$

* 256QAM: $$\begin{aligned}
d(i)=& \frac{1}{\sqrt{170}}\{(1-2 b(8 i))[8-(1-2 b(8 i+2))[4-(1-2 b(8 i+4))[2-(1-2 b(8 i+6))]]]\\
&+j(1-2 b(8 i+1))[8-(1-2 b(8 i+3))[4-(1-2 b(8 i+5))[2-(1-2 b(8 i+7))]]]\}
\end{aligned}$$


```
def qpsk_modulation_mapper(bit_seq):
    return ((1-2*bit_seq[0]) + 1j*(1 - 2*bit_seq[1]))/np.sqrt(2)

def qam16_modulation_mapper(bit_seq):
    return ((1 - 2*bit_seq(0))*(2 - (1 - 2*bit_seq(2))) + 1j*(1 - 2*bit_seq(1))*(2 - (1 - 2*bit_seq(3))))/np.sqrt(10)

def qam64_modulatin_mapper(bit_seq):
    scale = 1/np.sqrt(42)
    re = (1 - 2*bit_seq[0])*(4 - ((1 - 2*bit_seq[2])*(2 - (1 - 2*bit_seq[4]))))
    im = (1 - 2*bit_seq[1])*(4 - ((1 - 2*bit_seq[3])*(2 - (1 - 2*bit_seq[5]))))
    return scale*(re + im*1j)

def qam256_modulation_mapper(bit_seq):
    scale = 1/np.sqrt(170)
    re = (1 - 2*bit_seq[0])*(8 - (1 - 2*bit_seq[2])*(4 - (1 - 2*bit_seq[4])*(2 - (1 - 2*bit_seq[6]))))
    im = (1 - 2*bit_seq[1])*(8 - (1 - 2*bit_seq[3])*(4 - (1 - 2*bit_seq[5])*(2 - (1 - 2*bit_seq[7]))))
    return scale*(re + im*1j)
```


