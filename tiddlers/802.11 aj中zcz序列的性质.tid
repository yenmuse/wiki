created: 20220427072432886
creator: TidGiUser
modified: 20220428054109380
modifier: TidGiUser
tags: wifi [[python code base]]
title: 802.11 aj中zcz序列的性质
tmap.id: 5c172933-5960-4f81-9f3b-ebb2b91d377c
type: text/vnd.tiddlywiki


```
import numpy as np
import matplotlib.pyplot as plt

zzc_str_complex_map = {"0":1, "1":1j, "2":-1, "3":-1j}

z_a_32_str = "22110220222220132233020222002031"
z_a_32 = np.array([zzc_str_complex_map[c] for c in z_a_32_str])

z_b_32_str = "20130022202022112031000020022233"
z_b_32 = np.array([zzc_str_complex_map[c] for c in z_b_32_str])

z_c_32_str = "22330202220020312211022022222013"
z_c_32 = np.array([zzc_str_complex_map[c] for c in z_c_32_str])

z_d_32_str = "20310000200222332013002220202211"
z_d_32 = np.array([zzc_str_complex_map[c] for c in z_d_32_str])

z_a_64_str = "2101000223031311210111130121020021012220230331332101333101212022"
z_a_64 = np.array([zzc_str_complex_map[c] for c in z_a_64_str])

z_b_64_str = "2220012120221030222012320200032322202303202232122220301002002101"
z_b_64 = np.array([zzc_str_complex_map[c] for c in z_b_64_str])

z_c_64_str = "2303020021011113230313110323000223032022210133312303313303232220"
z_c_64 = np.array([zzc_str_complex_map[c] for c in z_c_64_str])

z_d_64_str = "2022032322201232202210300002012120222101222030102022321200022303"
z_d_64 = np.array([zzc_str_complex_map[c] for c in z_d_64_str])

z_a_128_str = "00112020222220132211022000220213001120201111130200332002113313200011202000000231221102202200203100112020333331200033200233113102"
z_a_128 = np.array([zzc_str_complex_map[c] for c in z_a_128_str])

z_b_128_str = "02132222202022112013002202200011021322221313110002312200133111220213222202020033201300222002223302132222313133220231220031133300"
z_b_128 = np.array([zzc_str_complex_map[c] for c in z_b_128_str])

z_c_128_str = "00332002220020312233020200000231003320021133132000112020111113020033200200220213223302022222201300332002331131020011202033333120"
z_c_128 = np.array([zzc_str_complex_map[c] for c in z_c_128_str])

z_d_128_str = "02312200200222332031000002020033023122001331112202132222131311000231220002200011203100002020221102312200311333000213222231313322"
z_d_128 = np.array([zzc_str_complex_map[c] for c in z_d_128_str])

z_a_256_str = "1302031011002330130210213322122313022132110001120231213222112330130203101100233020132132003323303120031033222330312010211100122313020310110023303120320311003001130221321100011220130310003301121302031011002330023103102211011231200310332223301302320333223001"
z_a_256 = np.array([zzc_str_complex_map[c] for c in z_a_256_str])

z_b_256_str = "1021003312232013102111003001130210212211122302310310221123302013102100331223201321322211011220133203003330012013320311001223130210210033122320133203332212233120102122111223023121320033011202311021003312232013031000332330023132030033300120131021332230013120"
z_b_256 = np.array([zzc_str_complex_map[c] for c in z_b_256_str])


z_c_256_str = "1100011213022132110012233120102111002330130203100033233020132132110001121302213222112330023121323322011231202132332212231302102111000112130221323322300113023203110023301302031022110112023103101100011213022132003301122013031033220112312021321100300131203203"
z_c_256 = np.array([zzc_str_complex_map[c] for c in z_c_256_str])

z_d_256_str = "1223023110212211122313023203110012232013102100330112201321322211122302311021221123302013031022113001023132032211300113021021110012230231102122113001312010213322122320131021003323300231031000331223023110212211011202312132003330010231320322111223312032033322"
z_d_256 = np.array([zzc_str_complex_map[c] for c in z_d_256_str])

def circ_xcorr(x, y):
    return np.array([np.sum(x*np.conjugate(np.roll(y, -i))) for i in np.arange(len(x))])
    
#stf_a = z_a_256*np.exp(1j*np.pi*np.arange(256)/2)
acor_z_a_256 = circ_xcorr(z_a_256, z_a_256)
acor_z_b_256 = circ_xcorr(z_b_256, z_b_256)
acor_z_c_256 = circ_xcorr(z_c_256, z_c_256)
acor_z_d_256 = circ_xcorr(z_d_256, z_d_256)

xcor_z_a_b_256 = circ_xcorr(z_a_256, z_b_256)
xcor_z_b_c_256 = circ_xcorr(z_b_256, z_c_256)
xcor_z_c_d_256 = circ_xcorr(z_c_256, z_d_256)
xcor_z_d_a_256 = circ_xcorr(z_d_256, z_a_256)

fig1, acor_axes = plt.subplots(2,2, sharex=True, sharey=True)
fig1.suptitle("illus of zcz auto-correlation", fontsize=12)
fig1.tight_layout()
acor_axes[0, 0].plot(np.abs(acor_z_a_256))
acor_axes[0, 0].set_title("auto-correlation of z_a_128", fontsize=10)
acor_axes[0, 0].set_xlabel("index")
acor_axes[0, 0].set_ylabel("mag")
acor_axes[0, 1].plot(np.abs(acor_z_b_256))
acor_axes[0, 1].set_title("auto-correlation of z_b_128", fontsize=10)
acor_axes[0, 1].set_xlabel("index")
acor_axes[0, 1].set_ylabel("mag")
acor_axes[1, 0].plot(np.abs(acor_z_c_256))
acor_axes[1, 0].set_title("auto-correlation of z_c_128", fontsize=10)
acor_axes[1, 0].set_xlabel("index")
acor_axes[1, 0].set_ylabel("mag")
acor_axes[1, 1].plot(np.abs(acor_z_d_256))
acor_axes[1, 1].set_title("auto-correlation of z_d_128", fontsize=10)
acor_axes[1, 1].set_xlabel("index")
acor_axes[1, 1].set_ylabel("mag")


fig2, xcor_axes = plt.subplots(2,2, sharex=True, sharey=True)
fig2.suptitle("illus of zcz cross-correlation", fontsize=12)
fig2.tight_layout()
xcor_axes[0, 0].plot(np.abs(xcor_z_a_b_256))
xcor_axes[0, 0].set_title("cross-correlation of z_a_128&z_b_128", fontsize=10)
xcor_axes[0, 0].set_xlabel("index")
xcor_axes[0, 0].set_ylabel("mag")
xcor_axes[0, 1].plot(np.abs(xcor_z_b_c_256))
xcor_axes[0, 1].set_title("cross-correlation of z_b_128&z_c_128", fontsize=10)
xcor_axes[0, 1].set_xlabel("index")
xcor_axes[0, 1].set_ylabel("mag")
xcor_axes[1, 0].plot(np.abs(xcor_z_c_d_256))
xcor_axes[1, 0].set_title("cross-correlation of z_c_128&z_d_128", fontsize=10)
xcor_axes[1, 0].set_xlabel("index")
xcor_axes[1, 0].set_ylabel("mag")
xcor_axes[1, 1].plot(np.abs(xcor_z_d_a_256))
xcor_axes[1, 1].set_title("cross-correlation of z_d_128&z_a_128", fontsize=10)
xcor_axes[1, 1].set_xlabel("index")
xcor_axes[1, 1].set_ylabel("mag")

plt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=0.1, hspace=0.2)

plt.show()
#xcor_a_b = circ_xcorr(z_a_256,z_b_256)
```
